"use strict";(self.webpackChunkGATK_SV=self.webpackChunkGATK_SV||[]).push([[2784],{342:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>d,contentTitle:()=>n,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"modules/resolve_complex","title":"ResolveComplexVariants","description":"Complex SV discovery","source":"@site/docs/modules/resolve_complex.md","sourceDirName":"modules","slug":"/modules/rcv","permalink":"/gatk-sv/docs/modules/rcv","draft":false,"unlisted":false,"editUrl":"https://github.com/broadinstitute/gatk-sv/tree/master/website/docs/modules/resolve_complex.md","tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"title":"ResolveComplexVariants","description":"Complex SV discovery","sidebar_position":12,"slug":"rcv"},"sidebar":"tutorialSidebar","previous":{"title":"CombineBatches","permalink":"/gatk-sv/docs/modules/cmb"},"next":{"title":"GenotypeComplexVariants","permalink":"/gatk-sv/docs/modules/gcv"}}');var l=o(4848),r=o(8453),t=o(6473);const c={title:"ResolveComplexVariants",description:"Complex SV discovery",sidebar_position:12,slug:"rcv"},n=void 0,d={},a=[{value:"Inputs",id:"inputs",level:3},{value:"<code>cohort_name</code>",id:"cohort_name",level:4},{value:"<HighlightOptionalArg>Optional</HighlightOptionalArg>  <code>merge_vcfs</code>",id:"optional--merge_vcfs",level:4},{value:"<code>cluster_vcfs</code>",id:"cluster_vcfs",level:4},{value:"<code>cluster_bothside_pass_lists</code>",id:"cluster_bothside_pass_lists",level:4},{value:"<code>cluster_background_fail_lists</code>",id:"cluster_background_fail_lists",level:4},{value:"<code>disc_files</code>",id:"disc_files",level:4},{value:"<code>rf_cutoffs</code>",id:"rf_cutoffs",level:4},{value:"<HighlightOptionalArg>Optional</HighlightOptionalArg> <code>use_hail</code>",id:"optional-use_hail",level:4},{value:"<HighlightOptionalArg>Optional</HighlightOptionalArg> <code>gcs_project</code>",id:"optional-gcs_project",level:4},{value:"Outputs",id:"outputs",level:3},{value:"<code>complex_resolve_vcfs</code>",id:"complex_resolve_vcfs",level:4},{value:"<code>complex_resolve_bothside_pass_list</code>",id:"complex_resolve_bothside_pass_list",level:4},{value:"<code>complex_resolve_background_fail_list</code>",id:"complex_resolve_background_fail_list",level:4},{value:"<code>breakpoint_overlap_dropped_record_vcfs</code>",id:"breakpoint_overlap_dropped_record_vcfs",level:4},{value:"<code>complex_resolve_merged_vcf</code>",id:"complex_resolve_merged_vcf",level:4}];function h(e){const s={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",mermaid:"mermaid",p:"p",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(s.p,{children:(0,l.jsx)(s.a,{href:"https://github.com/broadinstitute/gatk-sv/blob/main/wdl/ResolveComplexVariants.wdl",children:"WDL source code"})}),"\n",(0,l.jsxs)(s.p,{children:["Identifies multi-breakpoint complex variants, which are annotated with the ",(0,l.jsx)(s.code,{children:"CPX"})," value in the ",(0,l.jsx)(s.code,{children:"SVTYPE"})," field. These\nvariants are putative, as read depth evidence is not assessed at this stage."]}),"\n",(0,l.jsx)(s.p,{children:"The following diagram illustrates the recommended invocation order:"}),"\n",(0,l.jsx)(s.mermaid,{value:"\nstateDiagram\n  direction LR\n  \n  classDef inModules stroke-width:0px,fill:#caf0f8,color:#00509d\n  classDef thisModule font-weight:bold,stroke-width:0px,fill:#ff9900,color:white\n  classDef outModules stroke-width:0px,fill:#caf0f8,color:#00509d\n\n  cb: CombineBatches\n  rcv: ResolveComplexVariants\n  gcv: GenotypeComplexVariants\n  cb --\x3e rcv\n  rcv --\x3e gcv\n  \n  class rcv thisModule\n  class cb inModules\n  class gcv outModules"}),"\n",(0,l.jsx)(s.h3,{id:"inputs",children:"Inputs"}),"\n",(0,l.jsx)(s.admonition,{type:"info",children:(0,l.jsxs)(s.p,{children:["Some inputs of batch data must match in order. Specifically, the order of the ",(0,l.jsx)(s.code,{children:"disc_files"})," array should match that of\n",(0,l.jsx)(s.code,{children:"rf_cutoff_files"}),"."]})}),"\n",(0,l.jsx)(s.h4,{id:"cohort_name",children:(0,l.jsx)(s.code,{children:"cohort_name"})}),"\n",(0,l.jsxs)(s.p,{children:["Cohort name. The guidelines outlined in the ",(0,l.jsx)(s.a,{href:"/docs/gs/inputs#sampleids",children:"sample ID requirements"})," section apply here."]}),"\n",(0,l.jsxs)(s.h4,{id:"optional--merge_vcfs",children:[(0,l.jsx)(t.$,{children:"Optional"}),"  ",(0,l.jsx)(s.code,{children:"merge_vcfs"})]}),"\n",(0,l.jsxs)(s.p,{children:["Default: ",(0,l.jsx)(s.code,{children:"false"}),". If true, merge contig-sharded VCFs into one genome-wide VCF. This may be used for convenience but cannot be used with\ndownstream workflows."]}),"\n",(0,l.jsx)(s.h4,{id:"cluster_vcfs",children:(0,l.jsx)(s.code,{children:"cluster_vcfs"})}),"\n",(0,l.jsxs)(s.p,{children:["Array of contig-sharded VCFs, generated in ",(0,l.jsx)(s.a,{href:"./cmb#combined_vcfs",children:"CombineBatches"}),"."]}),"\n",(0,l.jsx)(s.h4,{id:"cluster_bothside_pass_lists",children:(0,l.jsx)(s.code,{children:"cluster_bothside_pass_lists"})}),"\n",(0,l.jsxs)(s.p,{children:["Array of variant lists with bothside SR support for all batches, generated in ",(0,l.jsx)(s.a,{href:"./cmb#cluster_bothside_pass_lists",children:"CombineBatches"}),"."]}),"\n",(0,l.jsx)(s.h4,{id:"cluster_background_fail_lists",children:(0,l.jsx)(s.code,{children:"cluster_background_fail_lists"})}),"\n",(0,l.jsxs)(s.p,{children:["Array of variant lists with low SR signal-to-noise ratio for all batches, generated in ",(0,l.jsx)(s.a,{href:"./cmb#cluster_background_fail_lists",children:"CombineBatches"}),"."]}),"\n",(0,l.jsx)(s.h4,{id:"disc_files",children:(0,l.jsx)(s.code,{children:"disc_files"})}),"\n",(0,l.jsxs)(s.p,{children:["Array of PE evidence files for all batches from ",(0,l.jsx)(s.a,{href:"./gbe#merged_pe",children:"GatherBatchEvidence"}),"."]}),"\n",(0,l.jsx)(s.h4,{id:"rf_cutoffs",children:(0,l.jsx)(s.code,{children:"rf_cutoffs"})}),"\n",(0,l.jsxs)(s.p,{children:["Array of batch genotyping cutoff files trained with the random forest filtering model from ",(0,l.jsx)(s.a,{href:"./fb#cutoffs",children:"FilterBatch"}),".\nMust match the order of ",(0,l.jsx)(s.a,{href:"#disc_files",children:"disc_files"}),"."]}),"\n",(0,l.jsxs)(s.h4,{id:"optional-use_hail",children:[(0,l.jsx)(t.$,{children:"Optional"})," ",(0,l.jsx)(s.code,{children:"use_hail"})]}),"\n",(0,l.jsxs)(s.p,{children:["Default: ",(0,l.jsx)(s.code,{children:"false"}),". Use Hail for VCF concatenation. This should only be used for projects with over 50k samples. If enabled, the\n",(0,l.jsx)(s.a,{href:"#optional-gcs_project",children:"gcs_project"})," must also be provided. Does not work on Terra."]}),"\n",(0,l.jsxs)(s.h4,{id:"optional-gcs_project",children:[(0,l.jsx)(t.$,{children:"Optional"})," ",(0,l.jsx)(s.code,{children:"gcs_project"})]}),"\n",(0,l.jsxs)(s.p,{children:["Google Cloud project ID. Required only if enabling ",(0,l.jsx)(s.a,{href:"#optional-use_hail",children:"use_hail"}),"."]}),"\n",(0,l.jsx)(s.h3,{id:"outputs",children:"Outputs"}),"\n",(0,l.jsx)(s.h4,{id:"complex_resolve_vcfs",children:(0,l.jsx)(s.code,{children:"complex_resolve_vcfs"})}),"\n",(0,l.jsx)(s.p,{children:"Array of contig-sharded VCFs containing putative complex variants."}),"\n",(0,l.jsx)(s.h4,{id:"complex_resolve_bothside_pass_list",children:(0,l.jsx)(s.code,{children:"complex_resolve_bothside_pass_list"})}),"\n",(0,l.jsx)(s.p,{children:"Array of contig-sharded bothside SR support variant lists."}),"\n",(0,l.jsx)(s.h4,{id:"complex_resolve_background_fail_list",children:(0,l.jsx)(s.code,{children:"complex_resolve_background_fail_list"})}),"\n",(0,l.jsx)(s.p,{children:"Array of contig-sharded high SR background variant lists."}),"\n",(0,l.jsx)(s.h4,{id:"breakpoint_overlap_dropped_record_vcfs",children:(0,l.jsx)(s.code,{children:"breakpoint_overlap_dropped_record_vcfs"})}),"\n",(0,l.jsx)(s.p,{children:"Variants dropped due to exact overlap with another's breakpoint."}),"\n",(0,l.jsx)(s.h4,{id:"complex_resolve_merged_vcf",children:(0,l.jsx)(s.code,{children:"complex_resolve_merged_vcf"})}),"\n",(0,l.jsxs)(s.p,{children:["Genome-wide output VCF. Only generated if using ",(0,l.jsx)(s.a,{href:"#optional--merge_vcfs",children:"merge_vcfs"}),"."]})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,l.jsx)(s,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},6473:(e,s,o)=>{o.d(s,{$:()=>l});var i=o(4848);const l=e=>{let{children:s}=e;return(0,i.jsx)("span",{style:{backgroundColor:"var(--highlight-optional-arg-background-color)",borderRadius:"2px",color:"var(--highlight-optional-arg-text-color)",padding:"0.2rem"},children:s})}},8453:(e,s,o)=>{o.d(s,{R:()=>t,x:()=>c});var i=o(6540);const l={},r=i.createContext(l);function t(e){const s=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(r.Provider,{value:s},e.children)}}}]);