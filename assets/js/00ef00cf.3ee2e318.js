"use strict";(self.webpackChunkGATK_SV=self.webpackChunkGATK_SV||[]).push([[725],{5080:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"modules/combine_batches","title":"CombineBatches","description":"Cross-batch variant clustering","source":"@site/docs/modules/combine_batches.md","sourceDirName":"modules","slug":"/modules/cmb","permalink":"/gatk-sv/docs/modules/cmb","draft":false,"unlisted":false,"editUrl":"https://github.com/broadinstitute/gatk-sv/tree/master/website/docs/modules/combine_batches.md","tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"title":"CombineBatches","description":"Cross-batch variant clustering","sidebar_position":11,"slug":"cmb"},"sidebar":"tutorialSidebar","previous":{"title":"RegenotypeCNVs","permalink":"/gatk-sv/docs/modules/rgcnvs"},"next":{"title":"ResolveComplexVariants","permalink":"/gatk-sv/docs/modules/rcv"}}');var r=i(4848),t=i(8453),o=i(6473);const c={title:"CombineBatches",description:"Cross-batch variant clustering",sidebar_position:11,slug:"cmb"},l=void 0,a={},d=[{value:"Inputs",id:"inputs",level:3},{value:"<code>cohort_name</code>",id:"cohort_name",level:4},{value:"<code>batches</code>",id:"batches",level:4},{value:"<HighlightOptionalArg>Optional</HighlightOptionalArg>  <code>merge_vcfs</code>",id:"optional--merge_vcfs",level:4},{value:"<code>pesr_vcfs</code>",id:"pesr_vcfs",level:4},{value:"<code>depth_vcfs</code>",id:"depth_vcfs",level:4},{value:"<code>raw_sr_bothside_pass_files</code>",id:"raw_sr_bothside_pass_files",level:4},{value:"<code>raw_sr_background_fail_files</code>",id:"raw_sr_background_fail_files",level:4},{value:"<code>localize_shard_size</code>",id:"localize_shard_size",level:4},{value:"<code>min_sr_background_fail_batches</code>",id:"min_sr_background_fail_batches",level:4},{value:"<HighlightOptionalArg>Optional</HighlightOptionalArg> <code>use_hail</code>",id:"optional-use_hail",level:4},{value:"<HighlightOptionalArg>Optional</HighlightOptionalArg> <code>gcs_project</code>",id:"optional-gcs_project",level:4},{value:"Outputs",id:"outputs",level:3},{value:"<code>combined_vcfs</code>",id:"combined_vcfs",level:4},{value:"<code>cluster_bothside_pass_lists</code>",id:"cluster_bothside_pass_lists",level:4},{value:"<code>cluster_background_fail_lists</code>",id:"cluster_background_fail_lists",level:4},{value:"<code>combine_batches_merged_vcf</code>",id:"combine_batches_merged_vcf",level:4}];function h(e){const s={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",mermaid:"mermaid",p:"p",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"https://github.com/broadinstitute/gatk-sv/blob/main/wdl/CombineBatches.wdl",children:"WDL source code"})}),"\n",(0,r.jsxs)(s.p,{children:["Merges variants across multiple batches. Variant merging uses similar methods and criteria as in ",(0,r.jsx)(s.a,{href:"./cb",children:"ClusterBatch"}),",\nbut in addition requires samples genotyped as non-reference to match sufficiently."]}),"\n",(0,r.jsx)(s.p,{children:"The following diagram illustrates the recommended invocation order:"}),"\n",(0,r.jsx)(s.mermaid,{value:"\nstateDiagram\n  direction LR\n    \n  classDef inModules stroke-width:0px,fill:#caf0f8,color:#00509d\n  classDef thisModule font-weight:bold,stroke-width:0px,fill:#ff9900,color:white\n  classDef outModules stroke-width:0px,fill:#caf0f8,color:#00509d\n\n  rgc: RegenotypeCNVs\n  cb: CombineBatches\n  rcv: ResolveComplexVariants\n  rgc --\x3e cb\n  cb --\x3e rcv\n  \n  class cb thisModule\n  class rgc inModules\n  class rcv outModules"}),"\n",(0,r.jsx)(s.h3,{id:"inputs",children:"Inputs"}),"\n",(0,r.jsx)(s.admonition,{type:"info",children:(0,r.jsxs)(s.p,{children:["All array inputs of batch data must match in order. For example, the order of the ",(0,r.jsx)(s.code,{children:"batches"})," array should match that of\n",(0,r.jsx)(s.code,{children:"pesr_vcfs"}),", ",(0,r.jsx)(s.code,{children:"depth_vcfs"}),", etc."]})}),"\n",(0,r.jsx)(s.h4,{id:"cohort_name",children:(0,r.jsx)(s.code,{children:"cohort_name"})}),"\n",(0,r.jsxs)(s.p,{children:["Cohort name. The guidelines outlined in the ",(0,r.jsx)(s.a,{href:"/docs/gs/inputs#sampleids",children:"sample ID requirements"})," section apply here."]}),"\n",(0,r.jsx)(s.h4,{id:"batches",children:(0,r.jsx)(s.code,{children:"batches"})}),"\n",(0,r.jsxs)(s.p,{children:["Array of batch identifiers. Should match the name used in ",(0,r.jsx)(s.a,{href:"./gbe#batch",children:"GatherBatchEvidence"}),". Order must match that of ",(0,r.jsx)(s.a,{href:"#depth_vcfs",children:"depth_vcfs"}),"."]}),"\n",(0,r.jsxs)(s.h4,{id:"optional--merge_vcfs",children:[(0,r.jsx)(o.$,{children:"Optional"}),"  ",(0,r.jsx)(s.code,{children:"merge_vcfs"})]}),"\n",(0,r.jsxs)(s.p,{children:["Default: ",(0,r.jsx)(s.code,{children:"false"}),". If true, merge contig-sharded VCFs into one genome-wide VCF. This may be used for convenience but cannot be used with\ndownstream workflows."]}),"\n",(0,r.jsx)(s.h4,{id:"pesr_vcfs",children:(0,r.jsx)(s.code,{children:"pesr_vcfs"})}),"\n",(0,r.jsxs)(s.p,{children:["Array of genotyped depth caller variants for all batches, generated in ",(0,r.jsx)(s.a,{href:"./gb#genotyped_depth_vcf",children:"GenotypeBatch"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"depth_vcfs",children:(0,r.jsx)(s.code,{children:"depth_vcfs"})}),"\n",(0,r.jsxs)(s.p,{children:["Array of re-genotyped depth caller variants for all batches, generated in ",(0,r.jsx)(s.a,{href:"./rgcnvs#regenotyped_depth_vcfs",children:"RegenotypeCNVs"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"raw_sr_bothside_pass_files",children:(0,r.jsx)(s.code,{children:"raw_sr_bothside_pass_files"})}),"\n",(0,r.jsxs)(s.p,{children:["Array of variant lists with bothside SR support for all batches, generated in ",(0,r.jsx)(s.a,{href:"./gb#sr_bothside_pass",children:"GenotypeBatch"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"raw_sr_background_fail_files",children:(0,r.jsx)(s.code,{children:"raw_sr_background_fail_files"})}),"\n",(0,r.jsxs)(s.p,{children:["Array of variant lists with low SR signal-to-noise ratio for all batches, generated in ",(0,r.jsx)(s.a,{href:"./gb#sr_background_fail",children:"GenotypeBatch"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"localize_shard_size",children:(0,r.jsx)(s.code,{children:"localize_shard_size"})}),"\n",(0,r.jsx)(s.p,{children:"Shard size for parallel computations. Decreasing this parameter may help reduce run time."}),"\n",(0,r.jsx)(s.h4,{id:"min_sr_background_fail_batches",children:(0,r.jsx)(s.code,{children:"min_sr_background_fail_batches"})}),"\n",(0,r.jsxs)(s.p,{children:["Threshold fraction of batches with high SR background for a given variant required in order to assign this\n",(0,r.jsx)(s.code,{children:"HIGH_SR_BACKGROUND"})," flag. Most users should leave this at the default value."]}),"\n",(0,r.jsxs)(s.h4,{id:"optional-use_hail",children:[(0,r.jsx)(o.$,{children:"Optional"})," ",(0,r.jsx)(s.code,{children:"use_hail"})]}),"\n",(0,r.jsxs)(s.p,{children:["Default: ",(0,r.jsx)(s.code,{children:"false"}),". Use Hail for VCF concatenation. This should only be used for projects with over 50k samples. If enabled, the\n",(0,r.jsx)(s.a,{href:"#optional-gcs_project",children:"gcs_project"})," must also be provided. Does not work on Terra."]}),"\n",(0,r.jsxs)(s.h4,{id:"optional-gcs_project",children:[(0,r.jsx)(o.$,{children:"Optional"})," ",(0,r.jsx)(s.code,{children:"gcs_project"})]}),"\n",(0,r.jsxs)(s.p,{children:["Google Cloud project ID. Required only if enabling ",(0,r.jsx)(s.a,{href:"#optional-use_hail",children:"use_hail"}),"."]}),"\n",(0,r.jsx)(s.h3,{id:"outputs",children:"Outputs"}),"\n",(0,r.jsx)(s.h4,{id:"combined_vcfs",children:(0,r.jsx)(s.code,{children:"combined_vcfs"})}),"\n",(0,r.jsx)(s.p,{children:"Array of contig-sharded VCFs of combined PE/SR and depth calls."}),"\n",(0,r.jsx)(s.h4,{id:"cluster_bothside_pass_lists",children:(0,r.jsx)(s.code,{children:"cluster_bothside_pass_lists"})}),"\n",(0,r.jsx)(s.p,{children:"Array of contig-sharded bothside SR support variant lists."}),"\n",(0,r.jsx)(s.h4,{id:"cluster_background_fail_lists",children:(0,r.jsx)(s.code,{children:"cluster_background_fail_lists"})}),"\n",(0,r.jsx)(s.p,{children:"Array of contig-sharded high SR background variant lists."}),"\n",(0,r.jsx)(s.h4,{id:"combine_batches_merged_vcf",children:(0,r.jsx)(s.code,{children:"combine_batches_merged_vcf"})}),"\n",(0,r.jsxs)(s.p,{children:["Genome-wide VCF of combined PE/SR and depth calls. Only generated if using ",(0,r.jsx)(s.a,{href:"#optional--merge_vcfs",children:"merge_vcfs"}),"."]})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},6473:(e,s,i)=>{i.d(s,{$:()=>r});var n=i(4848);const r=e=>{let{children:s}=e;return(0,n.jsx)("span",{style:{backgroundColor:"var(--highlight-optional-arg-background-color)",borderRadius:"2px",color:"var(--highlight-optional-arg-text-color)",padding:"0.2rem"},children:s})}},8453:(e,s,i)=>{i.d(s,{R:()=>o,x:()=>c});var n=i(6540);const r={},t=n.createContext(r);function o(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);