"use strict";(self.webpackChunkGATK_SV=self.webpackChunkGATK_SV||[]).push([[7482],{5931:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"modules/regenotype_cnvs","title":"RegenotypeCNVs","description":"Regenotype CNVs","source":"@site/docs/modules/regenotype_cnvs.md","sourceDirName":"modules","slug":"/modules/rgcnvs","permalink":"/gatk-sv/docs/modules/rgcnvs","draft":false,"unlisted":false,"editUrl":"https://github.com/broadinstitute/gatk-sv/tree/master/website/docs/modules/regenotype_cnvs.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"title":"RegenotypeCNVs","description":"Regenotype CNVs","sidebar_position":10,"slug":"rgcnvs"},"sidebar":"tutorialSidebar","previous":{"title":"GenotypeBatch","permalink":"/gatk-sv/docs/modules/gb"},"next":{"title":"CombineBatches","permalink":"/gatk-sv/docs/modules/cmb"}}');var c=s(4848),d=s(8453);const r={title:"RegenotypeCNVs",description:"Regenotype CNVs",sidebar_position:10,slug:"rgcnvs"},o=void 0,i={},h=[{value:"Inputs",id:"inputs",level:3},{value:"<code>depth_vcfs</code>",id:"depth_vcfs",level:4},{value:"<code>cohort_depth_vcf</code>",id:"cohort_depth_vcf",level:4},{value:"<code>batch_depth_vcfs</code>",id:"batch_depth_vcfs",level:4},{value:"<code>coveragefiles</code>",id:"coveragefiles",level:4},{value:"<code>medianfiles</code>",id:"medianfiles",level:4},{value:"<code>RD_depth_sepcutoffs</code>",id:"rd_depth_sepcutoffs",level:4},{value:"<code>n_per_split</code>",id:"n_per_split",level:4},{value:"<code>n_RD_genotype_bins</code>",id:"n_rd_genotype_bins",level:4},{value:"<code>batches</code>",id:"batches",level:4},{value:"<code>cohort</code>",id:"cohort",level:4},{value:"<code>regeno_coverage_medians</code>",id:"regeno_coverage_medians",level:4},{value:"Outputs",id:"outputs",level:3},{value:"<code>regenotyped_depth_vcfs</code>",id:"regenotyped_depth_vcfs",level:4}];function a(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",mermaid:"mermaid",p:"p",...(0,d.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.p,{children:(0,c.jsx)(t.a,{href:"https://github.com/broadinstitute/gatk-sv/blob/main/wdl/RegenotypeCNVs.wdl",children:"WDL source code"})}),"\n",(0,c.jsx)(t.p,{children:'Re-genotypes probable mosaic variants across multiple batches. This is a "cohort-level" workflow that operates on\nall batches.'}),"\n",(0,c.jsx)(t.p,{children:"The following diagram illustrates the recommended invocation order:"}),"\n",(0,c.jsx)(t.mermaid,{value:"\nstateDiagram\n  direction LR\n  \n  classDef inModules stroke-width:0px,fill:#caf0f8,color:#00509d\n  classDef thisModule font-weight:bold,stroke-width:0px,fill:#ff9900,color:white\n  classDef outModules stroke-width:0px,fill:#caf0f8,color:#00509d\n\n  gb: GenotypeBatch\n  rgc: RegenotypeCNVs\n  cb: CombineBatches\n  gb --\x3e rgc\n  rgc --\x3e cb\n  \n  class rgc thisModule\n  class gb inModules\n  class cb outModules"}),"\n",(0,c.jsx)(t.h3,{id:"inputs",children:"Inputs"}),"\n",(0,c.jsx)(t.admonition,{type:"info",children:(0,c.jsxs)(t.p,{children:["All array inputs of batch data must match in order. For example, the order of the ",(0,c.jsx)(t.code,{children:"batches"})," array should match that of\n",(0,c.jsx)(t.code,{children:"depth_vcfs"}),", ",(0,c.jsx)(t.code,{children:"batch_depth_vcfs"}),", etc."]})}),"\n",(0,c.jsx)(t.h4,{id:"depth_vcfs",children:(0,c.jsx)(t.code,{children:"depth_vcfs"})}),"\n",(0,c.jsxs)(t.p,{children:["Array of genotyped depth caller variants for all batches, generated in ",(0,c.jsx)(t.a,{href:"./gb#genotyped_depth_vcf",children:"GenotypeBatch"}),"."]}),"\n",(0,c.jsx)(t.h4,{id:"cohort_depth_vcf",children:(0,c.jsx)(t.code,{children:"cohort_depth_vcf"})}),"\n",(0,c.jsxs)(t.p,{children:["Merged depth caller variants for the cohort, generated in ",(0,c.jsx)(t.a,{href:"./msites#cohort_depth_vcf",children:"MergeBatchSites"}),"."]}),"\n",(0,c.jsx)(t.h4,{id:"batch_depth_vcfs",children:(0,c.jsx)(t.code,{children:"batch_depth_vcfs"})}),"\n",(0,c.jsxs)(t.p,{children:["Array of filtered depth caller variants for all batches, generated in ",(0,c.jsx)(t.a,{href:"./fb#filtered_depth_vcf",children:"FilterBatch"}),". Order must match that of ",(0,c.jsx)(t.a,{href:"#depth_vcfs",children:"depth_vcfs"}),"."]}),"\n",(0,c.jsx)(t.h4,{id:"coveragefiles",children:(0,c.jsx)(t.code,{children:"coveragefiles"})}),"\n",(0,c.jsxs)(t.p,{children:["Array of merged RD evidence files for all batches from ",(0,c.jsx)(t.a,{href:"./gbe#merged_bincov",children:"GatherBatchEvidence"}),". Order must match that of ",(0,c.jsx)(t.a,{href:"#depth_vcfs",children:"depth_vcfs"}),"."]}),"\n",(0,c.jsx)(t.h4,{id:"medianfiles",children:(0,c.jsx)(t.code,{children:"medianfiles"})}),"\n",(0,c.jsxs)(t.p,{children:["Array of median coverage tables for all batches from ",(0,c.jsx)(t.a,{href:"./gbe#median_cov",children:"GatherBatchEvidence"}),". Order must match that of ",(0,c.jsx)(t.a,{href:"#depth_vcfs",children:"depth_vcfs"}),"."]}),"\n",(0,c.jsx)(t.h4,{id:"rd_depth_sepcutoffs",children:(0,c.jsx)(t.code,{children:"RD_depth_sepcutoffs"})}),"\n",(0,c.jsxs)(t.p,{children:['Array of "depth_depth" genotype cutoff files (depth evidence for depth-based calls) generated in\n',(0,c.jsx)(t.a,{href:"./gb#trained_genotype___sepcutoff",children:"GenotypeBatch"}),". Order must match that of ",(0,c.jsx)(t.a,{href:"#depth_vcfs",children:"depth_vcfs"}),"."]}),"\n",(0,c.jsx)(t.h4,{id:"n_per_split",children:(0,c.jsx)(t.code,{children:"n_per_split"})}),"\n",(0,c.jsx)(t.p,{children:"Records per shard when scattering variants. Decrease to increase parallelism if the workflow is running slowly."}),"\n",(0,c.jsx)(t.h4,{id:"n_rd_genotype_bins",children:(0,c.jsx)(t.code,{children:"n_RD_genotype_bins"})}),"\n",(0,c.jsx)(t.p,{children:"Number of depth genotyping bins. Most users should leave this at the default value."}),"\n",(0,c.jsx)(t.h4,{id:"batches",children:(0,c.jsx)(t.code,{children:"batches"})}),"\n",(0,c.jsxs)(t.p,{children:["Array of batch identifiers. Should match the name used in ",(0,c.jsx)(t.a,{href:"./gbe#batch",children:"GatherBatchEvidence"}),". Order must match that of ",(0,c.jsx)(t.a,{href:"#depth_vcfs",children:"depth_vcfs"}),"."]}),"\n",(0,c.jsx)(t.h4,{id:"cohort",children:(0,c.jsx)(t.code,{children:"cohort"})}),"\n",(0,c.jsx)(t.p,{children:"Cohort name. May be alphanumeric with underscores."}),"\n",(0,c.jsx)(t.h4,{id:"regeno_coverage_medians",children:(0,c.jsx)(t.code,{children:"regeno_coverage_medians"})}),"\n",(0,c.jsxs)(t.p,{children:["Array of regenotyping metrics generated in ",(0,c.jsx)(t.a,{href:"./gb#regeno_coverage_medians",children:"GenotypeBatch"}),"."]}),"\n",(0,c.jsx)(t.h3,{id:"outputs",children:"Outputs"}),"\n",(0,c.jsx)(t.h4,{id:"regenotyped_depth_vcfs",children:(0,c.jsx)(t.code,{children:"regenotyped_depth_vcfs"})}),"\n",(0,c.jsx)(t.p,{children:"Array of batch depth VCFs after regenotyping."})]})}function l(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var n=s(6540);const c={},d=n.createContext(c);function r(e){const t=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),n.createElement(d.Provider,{value:t},e.children)}}}]);