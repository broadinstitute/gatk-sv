"use strict";(self.webpackChunkGATK_SV=self.webpackChunkGATK_SV||[]).push([[7542],{1022:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>r,contentTitle:()=>d,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"modules/genotype_complex","title":"GenotypeComplexVariants","description":"Complex SV genotyping","source":"@site/docs/modules/genotype_complex.md","sourceDirName":"modules","slug":"/modules/gcv","permalink":"/gatk-sv/docs/modules/gcv","draft":false,"unlisted":false,"editUrl":"https://github.com/broadinstitute/gatk-sv/tree/master/website/docs/modules/genotype_complex.md","tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"title":"GenotypeComplexVariants","description":"Complex SV genotyping","sidebar_position":13,"slug":"gcv"},"sidebar":"tutorialSidebar","previous":{"title":"ResolveComplexVariants","permalink":"/gatk-sv/docs/modules/rcv"},"next":{"title":"CleanVcf","permalink":"/gatk-sv/docs/modules/cvcf"}}');var s=o(4848),c=o(8453),l=o(6473);const t={title:"GenotypeComplexVariants",description:"Complex SV genotyping",sidebar_position:13,slug:"gcv"},d=void 0,r={},a=[{value:"Inputs",id:"inputs",level:3},{value:"<code>cohort_name</code>",id:"cohort_name",level:4},{value:"<code>batches</code>",id:"batches",level:4},{value:"<code>ped_file</code>",id:"ped_file",level:4},{value:"<code>depth_vcfs</code>",id:"depth_vcfs",level:4},{value:"<HighlightOptionalArg>Optional</HighlightOptionalArg>  <code>merge_vcfs</code>",id:"optional--merge_vcfs",level:4},{value:"<HighlightOptionalArg>Optional</HighlightOptionalArg> <code>localize_shard_size</code>",id:"optional-localize_shard_size",level:4},{value:"<code>complex_resolve_vcfs</code>",id:"complex_resolve_vcfs",level:4},{value:"<code>bincov_files</code>",id:"bincov_files",level:4},{value:"<code>depth_gt_rd_sep_files</code>",id:"depth_gt_rd_sep_files",level:4},{value:"<code>median_coverage_files</code>",id:"median_coverage_files",level:4},{value:"<HighlightOptionalArg>Optional</HighlightOptionalArg> <code>use_hail</code>",id:"optional-use_hail",level:4},{value:"<HighlightOptionalArg>Optional</HighlightOptionalArg> <code>gcs_project</code>",id:"optional-gcs_project",level:4},{value:"Outputs",id:"outputs",level:3},{value:"<code>complex_genotype_vcfs</code>",id:"complex_genotype_vcfs",level:4},{value:"<code>complex_genotype_merged_vcf</code>",id:"complex_genotype_merged_vcf",level:4}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",h4:"h4",mermaid:"mermaid",p:"p",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/broadinstitute/gatk-sv/blob/main/wdl/GenotypeComplexVariants.wdl",children:"WDL source code"})}),"\n",(0,s.jsx)(n.p,{children:"Genotypes, filters, and classifies putative complex variants using depth evidence."}),"\n",(0,s.jsx)(n.p,{children:"The following diagram illustrates the recommended invocation order:"}),"\n",(0,s.jsx)(n.mermaid,{value:"\nstateDiagram\n  direction LR\n  \n  classDef inModules stroke-width:0px,fill:#caf0f8,color:#00509d\n  classDef thisModule font-weight:bold,stroke-width:0px,fill:#ff9900,color:white\n  classDef outModules stroke-width:0px,fill:#caf0f8,color:#00509d\n\n  rcv: ResolveComplexVariants\n  gcv: GenotypeComplexVariants\n  cvcf: CleanVcf\n  rcv --\x3e gcv\n  gcv --\x3e cvcf\n  \n  class gcv thisModule\n  class rcv inModules\n  class cvcf outModules"}),"\n",(0,s.jsx)(n.h3,{id:"inputs",children:"Inputs"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Some inputs of batch data must match in order. Specifically, the order of the ",(0,s.jsx)(n.code,{children:"batches"})," array should match that of\n",(0,s.jsx)(n.code,{children:"depth_vcfs"}),", ",(0,s.jsx)(n.code,{children:"bincov_files"}),", ",(0,s.jsx)(n.code,{children:"depth_gt_rd_sep_files"}),", and ",(0,s.jsx)(n.code,{children:"median_coverage_files"}),"."]})}),"\n",(0,s.jsx)(n.h4,{id:"cohort_name",children:(0,s.jsx)(n.code,{children:"cohort_name"})}),"\n",(0,s.jsxs)(n.p,{children:["Cohort name. The guidelines outlined in the ",(0,s.jsx)(n.a,{href:"/docs/gs/inputs#sampleids",children:"sample ID requirements"})," section apply here."]}),"\n",(0,s.jsx)(n.h4,{id:"batches",children:(0,s.jsx)(n.code,{children:"batches"})}),"\n",(0,s.jsxs)(n.p,{children:["Array of batch identifiers. Should match the name used in ",(0,s.jsx)(n.a,{href:"./gbe#batch",children:"GatherBatchEvidence"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"ped_file",children:(0,s.jsx)(n.code,{children:"ped_file"})}),"\n",(0,s.jsxs)(n.p,{children:["Family structures and sex assignments determined in ",(0,s.jsx)(n.a,{href:"./eqc",children:"EvidenceQC"}),". See ",(0,s.jsx)(n.a,{href:"/docs/gs/inputs#ped-format",children:"PED file format"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"depth_vcfs",children:(0,s.jsx)(n.code,{children:"depth_vcfs"})}),"\n",(0,s.jsxs)(n.p,{children:["Array of re-genotyped depth caller variants for all batches, generated in ",(0,s.jsx)(n.a,{href:"./rgcnvs#regenotyped_depth_vcfs",children:"RegenotypeCNVs"}),".\nMust match order of ",(0,s.jsx)(n.a,{href:"#batches",children:"batches"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"optional--merge_vcfs",children:[(0,s.jsx)(l.$,{children:"Optional"}),"  ",(0,s.jsx)(n.code,{children:"merge_vcfs"})]}),"\n",(0,s.jsxs)(n.p,{children:["Default: ",(0,s.jsx)(n.code,{children:"false"}),". If true, merge contig-sharded VCFs into one genome-wide VCF. This may be used for convenience but cannot be used with\ndownstream workflows."]}),"\n",(0,s.jsxs)(n.h4,{id:"optional-localize_shard_size",children:[(0,s.jsx)(l.$,{children:"Optional"})," ",(0,s.jsx)(n.code,{children:"localize_shard_size"})]}),"\n",(0,s.jsxs)(n.p,{children:["Default: ",(0,s.jsx)(n.code,{children:"50000"}),". Shard size for parallel computations. Decreasing this parameter may help reduce run time."]}),"\n",(0,s.jsx)(n.h4,{id:"complex_resolve_vcfs",children:(0,s.jsx)(n.code,{children:"complex_resolve_vcfs"})}),"\n",(0,s.jsxs)(n.p,{children:["Array of contig-sharded VCFs containing putative complex variants, generated in ",(0,s.jsx)(n.a,{href:"./rcv#complex_resolve_vcfs",children:"ResolveComplexVariants"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"bincov_files",children:(0,s.jsx)(n.code,{children:"bincov_files"})}),"\n",(0,s.jsxs)(n.p,{children:["Array of RD evidence files for all batches from ",(0,s.jsx)(n.a,{href:"./gbe#counts",children:"GatherBatchEvidence"}),". Must match order of ",(0,s.jsx)(n.a,{href:"#batches",children:"batches"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"depth_gt_rd_sep_files",children:(0,s.jsx)(n.code,{children:"depth_gt_rd_sep_files"})}),"\n",(0,s.jsxs)(n.p,{children:['Array of "depth_depth" genotype cutoff files (depth evidence for depth-based calls) generated in\n',(0,s.jsx)(n.a,{href:"./gb#trained_genotype___sepcutoff",children:"GenotypeBatch"}),". Order must match that of ",(0,s.jsx)(n.a,{href:"#batches",children:"batches"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"median_coverage_files",children:(0,s.jsx)(n.code,{children:"median_coverage_files"})}),"\n",(0,s.jsxs)(n.p,{children:["Array of median coverage tables for all batches from ",(0,s.jsx)(n.a,{href:"./gbe#median_cov",children:"GatherBatchEvidence"}),". Order must match that of ",(0,s.jsx)(n.a,{href:"#batches",children:"batches"}),"."]}),"\n",(0,s.jsxs)(n.h4,{id:"optional-use_hail",children:[(0,s.jsx)(l.$,{children:"Optional"})," ",(0,s.jsx)(n.code,{children:"use_hail"})]}),"\n",(0,s.jsxs)(n.p,{children:["Default: ",(0,s.jsx)(n.code,{children:"false"}),". Use Hail for VCF concatenation. This should only be used for projects with over 50k samples. If enabled, the\n",(0,s.jsx)(n.a,{href:"#optional-gcs_project",children:"gcs_project"})," must also be provided. Does not work on Terra."]}),"\n",(0,s.jsxs)(n.h4,{id:"optional-gcs_project",children:[(0,s.jsx)(l.$,{children:"Optional"})," ",(0,s.jsx)(n.code,{children:"gcs_project"})]}),"\n",(0,s.jsxs)(n.p,{children:["Google Cloud project ID. Required only if enabling ",(0,s.jsx)(n.a,{href:"#optional-use_hail",children:"use_hail"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"outputs",children:"Outputs"}),"\n",(0,s.jsx)(n.h4,{id:"complex_genotype_vcfs",children:(0,s.jsx)(n.code,{children:"complex_genotype_vcfs"})}),"\n",(0,s.jsx)(n.p,{children:"Array of contig-sharded VCFs containing fully resolved and genotyped complex variants."}),"\n",(0,s.jsx)(n.h4,{id:"complex_genotype_merged_vcf",children:(0,s.jsx)(n.code,{children:"complex_genotype_merged_vcf"})}),"\n",(0,s.jsxs)(n.p,{children:["Genome-wide output VCF. Only generated if using ",(0,s.jsx)(n.a,{href:"#optional--merge_vcfs",children:"merge_vcfs"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},6473:(e,n,o)=>{o.d(n,{$:()=>s});var i=o(4848);const s=e=>{let{children:n}=e;return(0,i.jsx)("span",{style:{backgroundColor:"var(--highlight-optional-arg-background-color)",borderRadius:"2px",color:"var(--highlight-optional-arg-text-color)",padding:"0.2rem"},children:n})}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>t});var i=o(6540);const s={},c=i.createContext(s);function l(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);