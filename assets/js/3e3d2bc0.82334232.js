"use strict";(self.webpackChunkGATK_SV=self.webpackChunkGATK_SV||[]).push([[9975],{993:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"advanced/build_ref_panel","title":"Building reference panels","description":"Building reference panels for the single-sample pipeline","source":"@site/docs/advanced/build_ref_panel.md","sourceDirName":"advanced","slug":"/advanced/build_ref_panel","permalink":"/gatk-sv/docs/advanced/build_ref_panel","draft":false,"unlisted":false,"editUrl":"https://github.com/broadinstitute/gatk-sv/tree/master/website/docs/advanced/build_ref_panel.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Building reference panels","description":"Building reference panels for the single-sample pipeline","sidebar_position":4,"slug":"build_ref_panel"},"sidebar":"tutorialSidebar","previous":{"title":"Building inputs","permalink":"/gatk-sv/docs/advanced/build_inputs"},"next":{"title":"Acknowledgements","permalink":"/gatk-sv/docs/acknowledgements"}}');var l=s(4848),i=s(8453);const a={title:"Building reference panels",description:"Building reference panels for the single-sample pipeline",sidebar_position:4,slug:"build_ref_panel"},r=void 0,o={},p=[];function c(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["A custom reference panel for the ",(0,l.jsx)(n.a,{href:"/docs/gs/calling_modes#single-sample-mode",children:"single-sample mode"})," can be generated most easily using the\n",(0,l.jsx)(n.a,{href:"https://github.com/broadinstitute/gatk-sv/blob/main/wdl/GATKSVPipelineBatch.wdl",children:"GATKSVPipelineBatch"})," workflow.\nThis must be run on a standalone Cromwell server, as the workflow is unstable on Terra."]}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsx)(n.p,{children:"Reference panels can also be generated by running the pipeline through joint calling on Terra, but there is\ncurrently no solution for automatically updating inputs."})}),"\n",(0,l.jsx)(n.p,{children:"We recommend copying the outputs from a Cromwell run to a permanent location by adding the following option to\nthe workflow configuration file:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{children:'  "final_workflow_outputs_dir" : "gs://my-outputs-bucket",\n  "use_relative_output_paths": false,\n'})}),"\n",(0,l.jsxs)(n.p,{children:["Here is an example of how to generate workflow input jsons from ",(0,l.jsx)(n.code,{children:"GATKSVPipelineBatch"})," workflow metadata:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Get metadata from Cromwshell."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"cromshell -t60 metadata 38c65ca4-2a07-4805-86b6-214696075fef > metadata.json\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Run the script."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"python scripts/inputs/create_test_batch.py \\\n   --execution-bucket gs://my-exec-bucket \\\n   --final-workflow-outputs-dir gs://my-outputs-bucket \\\n   metadata.json \\\n   > inputs/values/my_ref_panel.json\n"})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Build test files for batched workflows (google cloud project id required)."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:'python scripts/inputs/build_inputs.py \\\n   inputs/values \\\n   inputs/templates/test \\\n   inputs/build/my_ref_panel/test \\\n   -a \'{ "test_batch" : "ref_panel_1kg" }\'\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Build test files for the single-sample workflow"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:'python scripts/inputs/build_inputs.py \\\n    inputs/values \\\n    inputs/templates/test/GATKSVPipelineSingleSample \\\n    inputs/build/NA19240/test_my_ref_panel \\\n    -a \'{ "single_sample" : "test_single_sample_NA19240", "ref_panel" : "my_ref_panel" }\'\n'})}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"Build files for a Terra workspace."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:'python scripts/inputs/build_inputs.py \\\n   inputs/values \\\n   inputs/templates/terra_workspaces/single_sample \\\n   inputs/build/NA12878/terra_my_ref_panel \\\n   -a \'{ "single_sample" : "test_single_sample_NA12878", "ref_panel" : "my_ref_panel" }\'\n'})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Note that the inputs to ",(0,l.jsx)(n.code,{children:"GATKSVPipelineBatch"})," may be used as resources\nfor the reference panel and therefore should also be in a permanent location."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>r});var t=s(6540);const l={},i=t.createContext(l);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);