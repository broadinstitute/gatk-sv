"use strict";(self.webpackChunkGATK_SV=self.webpackChunkGATK_SV||[]).push([[7383],{767:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"advanced/docker/automated","title":"Automated Deployment","description":"Build and Publish Images","source":"@site/docs/advanced/docker/automated.md","sourceDirName":"advanced/docker","slug":"/advanced/docker/automated","permalink":"/gatk-sv/docs/advanced/docker/automated","draft":false,"unlisted":false,"editUrl":"https://github.com/broadinstitute/gatk-sv/tree/master/website/docs/advanced/docker/automated.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Automated Deployment","description":"Build and Publish Images","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Docker Images Hierarchy","permalink":"/gatk-sv/docs/advanced/docker/images"},"next":{"title":"Manual Deployment","permalink":"/gatk-sv/docs/advanced/docker/manual"}}');var i=t(4848),r=t(8453),a=t(1470),o=t(9365);const l={title:"Automated Deployment",description:"Build and Publish Images",sidebar_position:2},c=void 0,d={},u=[{value:"Workflow Layout",id:"workflow-layout",level:2},{value:"Determine Build Args",id:"args",level:3},{value:"Testing Docker Image Build",id:"build",level:3},{value:"Publishing Docker Images",id:"publish",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"GATK-SV Docker images are automatically built, tested, and pushed to\ncontainer registries. An automated continuous\nintegration and continuous delivery (CI/CD) ensures the\nimages are built and tested consistently and reproducibly in standardized Linux virtual machines."}),"\n",(0,i.jsx)(n.p,{children:"The automation pipeline runs on GitHub Actions and performs a regression\ntest as part of every pull request. When a pull request is merged, the automation\npipeline publishes images on the Google Container Registry (GCR)\nand Azure Container Registry (ACR), and updates their references."}),"\n",(0,i.jsx)(n.p,{children:"The latest Docker images are listed in the files below.\nDetailed automated deployment is described in the following sections."}),"\n",(0,i.jsxs)(a.A,{groupId:"cr",defaultValue:"gcr",values:[{label:"ACR",value:"acr"},{label:"GCR",value:"gcr"}],children:[(0,i.jsx)(o.A,{value:"acr",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/broadinstitute/gatk-sv/blob/main/inputs/values/dockers_azure.json",children:"gatk-sv/inputs/values/dockers_azure.json"})})}),(0,i.jsx)(o.A,{value:"gcr",children:(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/broadinstitute/gatk-sv/blob/main/inputs/values/dockers.json",children:"gatk-sv/inputs/values/dockers.json"})})})]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"The detailed explanation of the automation workflow provided on this page\nis intended for users who need to configure the CI/CD workflow on\ntheir own fork of GATK-SV's GitHub repository to host Docker images on\ntheir own container registries."}),(0,i.jsx)(n.p,{children:"If you only need the list of latest Docker images, you may refer to the above-listed files."})]}),"\n",(0,i.jsx)(n.h2,{id:"workflow-layout",children:"Workflow Layout"}),"\n",(0,i.jsxs)(n.p,{children:["The automation workflow is defined in\n",(0,i.jsx)(n.a,{href:"https://github.com/broadinstitute/gatk-sv/blob/main/.github/workflows/sv_pipeline_docker.yml",children:(0,i.jsx)(n.code,{children:"sv_pipeline.yml"})}),"\nand utilizes the\n",(0,i.jsx)(n.a,{href:"https://github.com/broadinstitute/gatk-sv/blob/main/scripts/docker/build_docker.py",children:(0,i.jsx)(n.code,{children:"build_docker.py"})}),"\nscript for building and publishing Docker images.\nThe workflow consists of three\n",(0,i.jsx)(n.a,{href:"https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobs",children:(0,i.jsx)(n.em,{children:"jobs"})}),"\ndiscussed in the following sections:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#args",children:"Determine build arguments"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#build",children:"Regression testing"})," (pull request and merge)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#publish",children:"Publishing Docker images"})," (merge only)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"args",children:"Determine Build Args"}),"\n",(0,i.jsxs)(n.p,{children:["This job is responsible for determining the arguments to be used by the\n",(0,i.jsx)(n.code,{children:"build_docker.py"})," script, specifically:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Determining commit SHAs"}),":\nConsidering the large number of GATK-SV Docker images,\nthe workflow builds and publishes only the\nDocker images affected by the changes introduced\nin a pull request.\nYou may refer to ",(0,i.jsx)(n.a,{href:"/docs/advanced/docker/images#incremental",children:"this page"}),"\non details regarding the incremental build strategy.\nThis job determines the commit SHAs of ",(0,i.jsx)(n.code,{children:"HEAD"})," and ",(0,i.jsx)(n.code,{children:"BASE"}),"\ncommits."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Compose image tag"}),":\nThe images are tagged with a consistent template as the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[DATE]-[RELEASE_TAG]-[HEAD_SHA_8]\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[DATE]"})," is in ",(0,i.jsx)(n.code,{children:"YYYY-MM-DD"}),", and is extracted\nfrom the timestamp of the last commit on the branch associated\nwith the pull request."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"RELEASE_TAG"})," is extracted from the\nlatest [pre-]release on GitHub."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"HEAD_SHA_8"})," denotes the first eight characters\nof the ",(0,i.jsx)(n.code,{children:"HEAD"})," commit SHA."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The following is an example of a tag generated\nin this step:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"2023-05-24-v0.27.3-beta-1796b665\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"build",children:"Testing Docker Image Build"}),"\n",(0,i.jsxs)(n.p,{children:["This job is triggered when ",(0,i.jsx)(n.strong,{children:"a commit is pushed to the pull request branch."}),"\nIt serves the purpose of regression testing of the Docker images.\nIt builds Docker images according to the arguments determined in ",(0,i.jsx)(n.a,{href:"#args",children:(0,i.jsx)(n.code,{children:"Determine Build Args"})}),".\nIf the Docker images are not successfully built, then the\njob fails and all images are discarded."]}),"\n",(0,i.jsx)(n.h3,{id:"publish",children:"Publishing Docker Images"}),"\n",(0,i.jsxs)(n.p,{children:["This job is triggered when ",(0,i.jsxs)(n.strong,{children:["a pull request is merged or a commit is pushed to the ",(0,i.jsx)(n.code,{children:"main"})," branch."]}),"\nSimilar to the ",(0,i.jsx)(n.a,{href:"#build",children:(0,i.jsx)(n.code,{children:"Test Images Build"})})," job,\nit builds Docker images. In addition,\nthis job also pushes the built images to the GCR and ACR\nand updates their list.\nThe job fails if it cannot successfully run all the steps.\nThe publishing process is summarized below."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Login"}),"\nto container registries in order to push the built images.\nThe job obtains authorization to push to Google and Azure container registries\nby assuming a Google service account and an Azure service principal, respectively.\nThe credentials required to assume these identities are defined as\n",(0,i.jsx)(n.a,{href:"https://docs.github.com/en/actions/security-guides/encrypted-secrets",children:"encrypted environment secrets"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Build and publish to ACR and GCR"}),":\nSimilar to the ",(0,i.jsx)(n.a,{href:"#build",children:"build job"}),", this job builds Docker images\nbased on the list of changed files specified using the\n",(0,i.jsx)(n.code,{children:"HEAD"})," and ",(0,i.jsx)(n.code,{children:"BASE"})," commit SHA. It's important to note\nthat the images pushed to GCR and ACR are identical and only differ in their tags."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Update the list of published images"}),":\nOnce the newly built images are successfully pushed,\nthis job updates the JSON files containing the list of images (i.e., ",(0,i.jsx)(n.code,{children:"dockers*.json"}),"),\nand commits and pushes the changes to the ",(0,i.jsx)(n.code,{children:"main"})," branch.\nTo achieve this, we use a ",(0,i.jsx)(n.em,{children:"bot"})," account that performs the following actions:"]}),"\n",(0,i.jsxs)(n.p,{children:["a. Login to git using the bot's Personal Access Token (PAT)\nin order to authorize it to push to the ",(0,i.jsx)(n.code,{children:"main"})," branch."]}),"\n",(0,i.jsxs)(n.p,{children:["b. Configure the Git installation in the GitHub Actions VMs using the ",(0,i.jsx)(n.em,{children:"bot"}),"'s credentials."]}),"\n",(0,i.jsxs)(n.p,{children:["c. Commit the changed files. The commit message references the\nGit commit that triggered the ",(0,i.jsx)(n.a,{href:"#publish",children:"publish"})," job."]}),"\n",(0,i.jsx)(n.p,{children:"d. Push the commit to the main branch."}),"\n",(0,i.jsxs)(n.p,{children:["It is worth noting that GitHub recognizes that this push to the ",(0,i.jsx)(n.code,{children:"main"})," branch is made from a GitHub\nActions environment, hence it does not trigger another ",(0,i.jsx)(n.a,{href:"#publish",children:"Publish"})," job,\navoiding infinite triggers of this job."]}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1470:(e,n,t)=>{t.d(n,{A:()=>y});var s=t(6540),i=t(4164),r=t(3104),a=t(6347),o=t(205),l=t(7485),c=t(1682),d=t(679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:s}})=>({value:e,label:n,attributes:t,default:s}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function m({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const t=(0,a.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(i),(0,s.useCallback)(e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})},[i,t])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,r=h(e),[a,l]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r})),[c,u]=p({queryString:t,groupId:i}),[g,b]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,i]=(0,d.Dv)(n);return[t,(0,s.useCallback)(e=>{n&&i.set(e)},[n,i])]}({groupId:i}),f=(()=>{const e=c??g;return m({value:e,tabValues:r})?e:null})();(0,o.A)(()=>{f&&l(f)},[f]);return{selectedValue:a,selectValue:(0,s.useCallback)(e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),b(e)},[u,b,r]),tabValues:r}}var b=t(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(4848);function x({className:e,block:n,selectedValue:t,selectValue:s,tabValues:a}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),c=e=>{const n=e.currentTarget,i=o.indexOf(n),r=a[i].value;r!==t&&(l(n),s(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:a.map(({value:e,label:n,attributes:s})=>(0,j.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...s,className:(0,i.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:t}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===t);return e?(0,s.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:r.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function k(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,j.jsx)(x,{...n,...e}),(0,j.jsx)(v,{...n,...e})]})}function y(e){const n=(0,b.A)();return(0,j.jsx)(k,{...e,children:u(e.children)},String(n))}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(6540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>a});t(6540);var s=t(4164);const i={tabItem:"tabItem_Ymn6"};var r=t(4848);function a({children:e,hidden:n,className:t}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(i.tabItem,t),hidden:n,children:e})}}}]);